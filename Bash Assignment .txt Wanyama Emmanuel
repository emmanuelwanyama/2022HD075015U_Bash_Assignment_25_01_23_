

                           BASH ASSIGNMENT

                    ANSWERS TO THE QUESTIONS

                     WANYAMA EMMANUEL OKUKU
                     
                       2022/HDO7/5015U

#1.Describe the format of the file and the data stored
The provided sample.vcf file is a typical VCF (Variant Call Format) file format used to store genetic variation data, 
such as single nucleotide polymorphisms (SNPs), insertions/deletions (indels) and and structural variation calls. 
A VCF file contains information about genetic variants that are found in one or more samples, 
and it is commonly used to store data generated by GATK variant Call and typically from next-generation sequencing (NGS) methods 
such as whole genome sequencing (WGS) and exome sequencing (WES).
A VCF file consists of two main parts: a header and a data section. 
The header begins with the characters "##" and contains meta-information about the file, 
such as the version of the VCF format, the reference genome used, and the source of the data.
 The data section contains one or more variant records, each of which is represented by a single line of text.
The columns after the header information of a sample.vcf file provided are tab-separated and typically include the following information:
    • CHROM: the chromosome or contig on which the variant is located.
    • POS: the position of the variant on the chromosome, in base-pair units.
    • ID: a unique identifier for the variant, such as a dbSNP or COSMIC ID.
    • REF: the reference allele of the variant.
    • ALT: the alternate allele(s) of the variant, separated by commas.
    • QUAL: a quality score for the variant, which is typically used to indicate the confidence in the variant call.
    • FILTER: a flag indicating whether the variant passed certain quality filters.
    • INFO: additional information about the variant, such as functional annotations or population frequency.
    • FORMAT: the format of the sample-specific data in the following columns.
    • SAMPLE_1: the genotype of the first sample for the variant, encoded as a string of alleles, separated by a / or | character.
    • SAMPLE_2: the genotype of the second sample for the variant, encoded in the same way.
    • SAMPLE_n: the genotype of the nth sample for the variant, encoded in the same way.


#2.What does the header section of the file contain. 
    cat sample.vcf | grep "^##"  #To get the header like lines in the vcf file.
    cat sample.vcf | grep "^##"  | less   #To View few lines at a time 

    The header of a VCF file contains meta-information about the file, such as the version of the VCF format, 
    the reference genome used, and the source of the data and may also include information about the software and parameters used to generate the file. 
    The header section ends with a line that begins with "#CHROM", which indicates the start of the data section of the file. 
    The header lines begin with the characters "##" and contain key-value pairs, separated by an "=" sign, that describe the file and its contents. 
    Some of the common information that the header contains are:
    • ##fileformat : The version of the VCF format.
    • ##reference : The reference genome that was used to generate the variant calls.
    • ##INFO : The definition of the INFO fields, including the field ID, data type, and a brief description.
    • ##FILTER : The definition of the FILTER fields, including the field ID, and a brief description.
    • ##FORMAT : The definition of the FORMAT fields, including the field ID, data type, and a brief description.
    • ##contig : The contig information of the reference genome.
    • ##source : The name and version of the software that was used to generate the variant
    • ##samplename : The names of the samples that are included in the file.
    • ##date : The date on which the file was generated.
    • ##phasing : Information about phasing of the genotype data.
  
    
#3.How many samples are in the file
         6 samples
      
         
#4.How many variants are in the file
       The Number of variants is:  398246 Variants
      
       
#5.How would you extract the chromosome, position, QualByDepth and RMSMappingQuality fields? Save the output to a tab-delimited file.
   
   Explanation:
   Used the  "bcftools query" to extract the "CHROM" (chromosome), "POS" (position), 
   "QUAL" (QualityByDepth) and "MQ" (RMSMappingQuality) fieldsfrom the VCF file "sample.vcf" 
   and saves the output to a tab-delimited file named “sample_output.txt”
   
   
 #6.Extract data that belongs to chromosomes 2,4 and MT
      
      Explanation:
      .First the provided file need to be compressed in .gz
      .Then indexed thus to be able to filter out the required data of specific chromosomes. 
       bcftools index sample.vcf.gz
       
       
#7.Print out variants that do not belong to chr20:1-30000000
    Refer to output files


#8.Extract variants that belong to SRR13107019
     Refer to output files
     
     
#9.Filter out variants with a QualByDepth above 7

    Explanation:
    .DP field in the FORMAT field represents the read depth for a specific sample above 7 in this   senario
    .The DP field in the INFO field represents the total read depth combining the read depth for all samples.
    
     Refer to output files
     
     
#10.How many contigs are referred to in the file. Check the header section

      2211 Contigs 
      
      
#11.Comment on the eighth and ninth columns of the file
    The eighth column, is presented as the "FORMAT" field, contains the names of the fields that describe the genotype information. 
    These fields are separated by a colon. Common fields include "GT" (genotype), "DP" (read depth), "GQ" (genotype quality), "AD" (allelic depths). 
    The ninth column, presented as the "sample" field, contains the values of the fields described in the FORMAT field, also separated by a colon. 
    The values are specific to each sample.
    For example, if the GT field in the ninth column shows that a sample is homozygous for the reference allele (GT=0/0), 
    this suggests that the sample does not carry the variant. 
    However, if the GT field shows that a sample is heterozygous (GT=0/1) or homozygous for the alternate allele (GT=1/1), this suggests that the sample carries the variant. 
     The DP field in the ninth column can be used to check the read depth of the sample, if the read depth is low this might suggest that the sample is of low quality or 
     that the variant is not well covered in the sequencing data.
      The GQ field in the ninth column can be used to check the genotype quality, if the genotype quality is low this might suggest that the variant call is not reliable. 
      The AD field in the ninth column can be used to check the allelic depth, a low allelic depth might suggest that the variant is not well covered in the sequencing data or 
      that the variant is not present in the sample.

      #Comment:
      The read depth is generally low which might indicate samples of low quality.
      
      
#12.Extract data on the read depth of called variants for sample SRR13107018
     Refer to output files


#13.Extract data on the allele frequency of alternate alleles. Combine this data with the chromosome and position of the alternate allele
    
    Explanation:
    The "-f" option is used to specify the fields to be extracted, in this case, the chromosome, position, and allele frequency of alternate alleles.
       AF is the Allele Frequency and is represented as a decimal number between 0 and 1. 
       It is the ratio of the number of alternate alleles to the total number of alleles.
       
               
                ##Manipulating SAM files##
                
           
 #1.Describe the format of the file and the data stored
    The SAM (Sequence Alignment/Map) format is a standard format for storing nucleotide or peptide sequence alignment data. 
    It is one of the most widely used formats for storing high-throughput sequencing data, such as data generated by Illumina, Ion Torrent, and PacBio platforms.
    The SAM format consists of a header section and an alignment section. 
    The header section is preceded by the "@" symbol and contains information about the alignment program, the reference sequences, and the read groups. 
    The alignment section contains the alignments of the reads to the reference sequences.
    The alignment section contains 11 mandatory fields and an optional field, each of them separated by tabs. These fields are:
    • QNAME: Query template name.
    • FLAG: bitwise flag.
    • RNAME: Reference sequence name.
    • POS: 1-based leftmost mapping position of the first base in the query.
    • MAPQ: mapping quality.
    • CIGAR: CIGAR string.
    • RNEXT: reference name of the next segment.
    • PNEXT: position of the next segment.
    • TLEN: observed template length.
    • SEQ: query sequence.
    • QUAL: query quality.
  The optional field is the tag field, it can contain a set of tag-value pairs separated by colons, each field has a 2-character tag, a type, 
  and a value.
  SAM files are text-based and can be easily viewed and edited using a text editor. 
  However, they can be very large and can take up a significant amount of storage space. 
  Therefore, it is common to compress SAM files using the BAM (Binary Alignment/Map) format.
  
  
#2.What does the header section of the file contain
  The header section of a SAM file contains information about the alignment program, the reference sequences, and the read groups. 
  It is preceded by the "@" symbol and contains a series of lines, each line starting with the "@" symbol and followed by a field identifier, such as "@HD", "@SQ", "@RG", "@PG".
  "@HD": header lines. This field contains information about the version of the SAM format and the sort order of the alignments.
    • "@SQ": reference sequence dictionary. 
    This field contains information about the reference sequences used in the alignment, such as the sequence name, length, and MD5 checksum.
    • "@RG": read group. This field contains information about the read group, 
    such as the read group ID, the sample, the library, and the sequencing platform.
    • "@PG": program record. This field contains information about the alignment program, such as the program name, version, and command line.
  The header section of a SAM file is essential for understanding the alignment data and for processing and analyzing the data. 
  It provides information about the reference sequences and the read groups, which can be used to filter, sort, and index the alignments.
  
  
#3.How many samples are in the file.
     Explanation:
The number of samples in a SAM file was determined by counting the number of read groups (RG) in the header section of the file. 
The read groups are identified by the "@RG" field and contain information about the sample, 
such as the sample name, the library, and the sequencing platform. 
Thus we use the bash utilities like. 

       #ANS 249 Samples
       
       
#4.How many alignments are in the file
        Explanation:
  First convert the SAM file to BAM format
   
  Then use the command "samtools flagstat" to count the number of alignments.
   
   #ANS,There are 36142 alignments in the file. 
   
   
#5.Get summary statistics for the alignments in the file
    • Samtools idxstats" which gives the number of reads and the number of bases mapped to each reference sequence in the file."
    • samtools stats" which gives detailed statistics on the alignments, such as the GC content, the insert size, and the mapping quality of the reads.
    • "samtools depth" which gives the depth of coverage for each position in the reference sequences.
    • "samtools view" which gives the number of alignments in the file, the number of reads, the number of mapped reads, and the number of unmapped reads. 
      The Following command we used to obtain the statistics on the sam/bam file. 

      35511  Which is the number of alignments in the file, the number of reads, the number of  mapped reads, and the number of unmapped reads.
      
      
#6.Count the number of fields in the file
   There are 18 fields.
   
   
#7.Print all lines in the file that have @SQ and sequence name tag beginning with NT_
     Refer to files output
     
     
#8.Print all lines in the file that have @RG and LB tag beginning with Solex
  
  
#9.Extract primarily aligned sequences and save them in another file
       Refer to files output
       
       
#10.Extract alignments that map to chromosomes 1 and 3. Save the output in BAM format
        Refer to files output
        
#11.How would you obtain unmapped reads from the file
        Refer to files output
        
        
#12.How many reads are aligned to chromosome 4
            Explanation
    The BAM files are already compressed so no need to unzip 
    however, random alignment retrieval only works for indexed BAM which in turn can be used to filter out the required data of specific chromosomes.
    ANS;
     There are 35511 reads.
     
     
#13.Comment of the second and sixth column of the file
    The second column of a SAM file, also known as the "flag" column, contains a numerical value that represents various properties of the alignment, 
    such as whether the read is paired-end or single-end, whether the read is mapped or unmapped, 
    and whether the read is the primary or secondary alignment. 
    The value in this column can be interpreted by performing bitwise operations on it. 
    The sixth column of a SAM file, also known as the "CIGAR" column, contains a string that describes the alignment of the read to the reference. 
    The string is composed of a series of numbers and letters, where each number represents the length of a matching or non-matching sequence, 
    and each letter represents the type of operation (such as "M" for match, "I" for insertion, and "D" for deletion).
  Comment:

      Answer:
            matches: 56

            insertions: 254

            deletions: 25
            
            
#14.Extract all optional fields of the file and save them in “optional_fields.txt”
          Refer to files output


      


